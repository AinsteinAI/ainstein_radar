#!/usr/bin/env python
PACKAGE = "ainstein_radar_drivers"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add( "update_rate", int_t, 0, "Tracking filter output data rate (fixed on initialization)", 10, 1, 20 )
gen.add( "min_time", double_t, 0, "Minimum time before target begins being tracked", 2.0, 0.1, 10.0 )
gen.add( "timeout", double_t, 0, "Timeout for filter updates, after which target is dropped", 0.5, 0.1, 10.0 )
gen.add( "confidence_level", int_t, 0, "Tracking filter confidence level (sets KF validation gate threshold)", 3, 1, 9 )

gen.add("proc_noise_speed", double_t, 0, "Kalman Filter speed process noise standard deviation, in meters per second", 1.0, 0.1, 10.0 )
gen.add("proc_noise_azim", double_t, 0, "Kalman Filter azimuth process noise standard deviation, in degrees", 5.0, 0.1, 20.0 )
gen.add("proc_noise_elev", double_t, 0, "Kalman Filter elevation process noise standard deviation, in degrees", 5.0, 0.1, 20.0 )

gen.add("min_range", double_t, 0, "Minimum range of detections used for filter updates, in meters", 0.2, 0.1, 10.0 )
gen.add("max_range", double_t, 0, "Maximum range of detections used for filter updates, in meters", 15.0, 0.1, 25.0 )

gen.add("proc_noise_vel_x", double_t, 0, "Cartesian Kalman Filter X velocity process noise standard deviation, in meters per second", 0.1, 0.1, 5.0 )
gen.add("proc_noise_vel_y", double_t, 0, "Cartesian Kalman Filter Y velocity process noise standard deviation, in meters per second", 0.1, 0.1, 5.0 )
gen.add("proc_noise_vel_z", double_t, 0, "Cartesian Kalman Filter Z velocity process noise standard deviation, in meters per second", 0.1, 0.1, 5.0 )

gen.add("meas_noise_speed", double_t, 0, "Cartesian Kalman Filter speed measurement noise standard deviation, in meters per second", 1.0, 0.1, 10.0 )
gen.add("meas_noise_pos", double_t, 0, "Cartesian Kalman Filter position measurement noise standard deviation, in meters", 1.0, 0.1, 5.0 )

gen.add("filter_type", int_t, 0, "Filter type to be used for tracking (0 for spherical, 1 for Cartesian)", 0, 0, 1 )

exit(gen.generate(PACKAGE, "ainstein_radar_drivers", "O79Params"))
