#!/usr/bin/env python

import errno
import socket
import struct
import time

import rospy 
from dynamic_reconfigure.server import Server
from ainstein_radar_drivers.cfg import O79ParamsConfig
from ainstein_radar_drivers.msg import O79NetworkParams
from ainstein_radar_drivers.msg import O79DeviceParams
from ainstein_radar_drivers.msg import O79TrackingParams

RADAR_PORT = 7
RADAR_IP = "10.0.0.10"

CONNECT_CMD = "connect"
CONNECT_RES = "Connection established."

PARAMS_CMD = "params"

class O79ConfigInterface( object ):
    
    def __init__( self ):    
        self.sock = None
        self.is_radar_connected = False

        self.config = None
        
        # filter_params dict format: ( name, display string, default value, scaling, format )
        self.filter_params = ( ( "update_rate", "Filter Process Rate (Hz)", "20.0", 1.0, "<B" ),
                               ( "min_time", "Filter Minimum Time (s)", "2.0", 0.1, "<B" ),
                               ( "timeout", "Filter Timeout (s)", "0.5", 0.1, "<B" ),
                               ( "confidence_level", "Filter Confidence Level", "3", 1, "<B" ),
                               ( "proc_noise_speed", "Filter Speed Process Noise (m/s)", "0.1", 0.1, "<B" ),
                               ( "proc_noise_azim", "Filter Azimuth Process Noise (deg)", "5.0", 0.1, "<B" ),
                               ( "proc_noise_elev", "Filter Elevation Process Noise (deg)", "5.0", 0.1, "<B" ),
                               ( "min_range", "Filter Update Minimum Range (m)", "0.2", 0.1, "<B" ),
                               ( "max_range", "Filter Update Maximum Range (m)", "15.0", 0.1, "<B" ),
                               ( "proc_noise_vel_x", "Cartesian Filter X Velocity Process Noise (m/s)", "0.1", 0.1, "<B" ),
                               ( "proc_noise_vel_y", "Cartesian Filter Y Velocity Process Noise (m/s)", "0.1", 0.1, "<B" ),
                               ( "proc_noise_vel_z", "Cartesian Filter Z Velocity Process Noise (m/s)", "0.1", 0.1, "<B" ),
                               ( "meas_noise_speed", "Cartesian Filter Speed Measurement Noise (m/s)", "5.0", 0.1, "<B" ),
                               ( "meas_noise_pos", "Cartesian Filter Position Measurement Noise (m)", "1.0", 0.1, "<B" ) )

        # Initialize publishers for radar params:
        self.pub_network_params = rospy.Publisher( '~params/network', O79NetworkParams, latch=True, queue_size=10 )
        self.network_params_msg = O79NetworkParams()

        self.pub_device_params = rospy.Publisher( '~params/device', O79DeviceParams, latch=True, queue_size=10 )
        self.device_params_msg = O79DeviceParams()

        self.pub_tracking_params = rospy.Publisher( '~params/tracking', O79TrackingParams, latch=True, queue_size=10 )
        self.tracking_params_msg = O79TrackingParams()
        
        # Connect to the radar:
        self.connect_to_radar()

        # Create the dynamic_reconfigure server:
        self.dynconfig_srv = Server( O79ParamsConfig, self.dynconfig_callback )

        
        
    def connect_to_radar( self ):
        if not self.is_radar_connected:
            # Create a new socket instance:
            self.sock = socket.socket( socket.AF_INET, # Internet
                                       socket.SOCK_STREAM ) # TCP

            # Set the socket timeout:
            self.sock.settimeout( 30 )

            # Connect the socket to the server (radar):
            try:
                self.sock.connect( ( RADAR_IP, RADAR_PORT ) ) # radar port is always 7 (ECHO port)
            except socket.error as err:
                if err.errno == errno.EADDRNOTAVAIL:
                    rospy.logerr( "Address not available" )
                else:
                    rospy.logerr( "%s", str( err ) )
                return

            # Send the connect command and receive the stored network configuraton in response:
            self.sock.sendall( CONNECT_CMD )

            try:
                msg = self.sock.recv( 1024 )
                time.sleep(1)
                self.is_radar_connected = True

                # Print the network params returned from connect:
                self.network_params_msg.ip = '.'.join( map( str, struct.unpack_from( "<4I", msg, offset=0 ) ) )
                self.network_params_msg.netmask = '.'.join( map( str, struct.unpack_from( "<4I", msg, offset=16 ) ) )
                self.network_params_msg.gateway = '.'.join( map( str, struct.unpack_from( "<4I", msg, offset=32 ) ) )
                self.network_params_msg.host_ip = '.'.join( map( str, struct.unpack_from( "<4I", msg, offset=48 ) ) )
                self.network_params_msg.host_port = int(''.join( map( str, struct.unpack_from( "<I", msg, offset=64 ) ) ) )
                
                # Print the device params returned from connect:
                self.device_params_msg.fw_version = '.'.join( map( str, struct.unpack_from( "<3B", msg, offset=68 ) ))
                self.device_params_msg.can_id = ''.join( map( hex, struct.unpack_from( "<B", msg, offset=71 ) ) )
                self.device_params_msg.serial_no = ''.join(map( lambda o: o.decode( 'utf-8' ), struct.unpack_from( "<16c", msg, offset=72 ) ) )
                self.device_params_msg.mac_address = ''.join( [ hex(item).zfill(4) for item in struct.unpack_from("<6B", msg, offset=88) ] ).replace("0x", "")

                # Print the tracking filter params returned from connect:
                for ind, (p_id, p_name, p_default, p_scale, p_fmt) in enumerate(self.filter_params):
                    exec('self.tracking_params_msg.'+p_id+'=p_scale * float( struct.unpack_from( p_fmt, msg, offset=94+ind )[0])' ) 
                self.tracking_params_msg.filter_type = int( struct.unpack_from( p_fmt, msg, offset=94+len(self.filter_params) )[0] )

                # Publish parameter messages (latched):
                self.pub_network_params.publish(self.network_params_msg)
                self.pub_device_params.publish(self.device_params_msg)
                self.pub_tracking_params.publish(self.tracking_params_msg)
                
            except socket.error as err:
                rospy.logerr( "Failed to connect to radar." )
                return

            except socket.timeout as err:
                rospy.logerr( "Connect timed out. Is the radar connected and powered?" )
                return


    def send_params_to_radar( self ):
        if not self.is_radar_connected:
            rospy.logerr( "Must connect to radar before sending parameters." )
            return
        
        # Send start configuration command:
        try:
            self.sock.sendto( PARAMS_CMD, ( RADAR_IP, RADAR_PORT ) )
        except socket.error as err:
            rospy.logerr( "%s", str(err) )
            return
        
        time.sleep( 1 )
        msg, addr = self.sock.recvfrom( 1024 )
        
        # Send new filter parameters:
        params_msg = struct.pack( "<BBBB", int( 1.0 * float( self.config.filter_update_rate ) ), \
                                  int( 10.0 * float( self.config.filter_min_time ) ), \
                                  int( 10.0 * float( self.config.filter_timeout ) ), \
                                  int( float( self.config.filter_confidence_level ) ) )
        
        try:
            pass
            # self.sock.sendto( params_msg, ( RADAR_IP, RADAR_PORT ) )
        except socket.error as err:
            rospy.logerr( "%s", str(err) )
            return

            
    def dynconfig_callback( self, config, level ):
        self.config = config
        #self.send_params_to_radar()
        return config

    
if __name__ == "__main__":
    try:
        rospy.init_node( 'o79_config_node' )
        # frame_id = rospy.get_param( '~frame_id', 'map' )
        # data_port = rospy.get_param( '~data_port', '/dev/ttyUSB0' )

        # Create the ROS interface 
        o79_config_intf = O79ConfigInterface()

        rospy.spin()
        
    except rospy.ROSInterruptException:
        pass
