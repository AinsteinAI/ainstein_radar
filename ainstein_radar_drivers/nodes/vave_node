#!/usr/bin/env python

import mmwave_CLI as cli
import time
import math
import serial
from collections import OrderedDict

import rospy
from ainstein_radar_msgs.msg import RadarTargetArray
from ainstein_radar_msgs.msg import RadarTarget

data_port = '/dev/ttyUSB0'
data_baud = 921600
stay_silent = True

# define lab-specific TLV data structurs
MMWDEMO_OUTPUT_MSG_POINT_CLOUD = 6
MMWDEMO_OUTPUT_MSG_TARGET_LIST = 7
MMWDEMO_OUTPUT_MSG_TARGET_INDEX = 8

TLVs_to_use = [MMWDEMO_OUTPUT_MSG_POINT_CLOUD]

class VaveROSInterface( object ):
    def __init__( self, frame_id ):
        self.pub = rospy.Publisher( '~targets/raw', RadarTargetArray, queue_size=10 )
        self.radar_data_msg = RadarTargetArray()
        self.radar_data_msg.header.stamp = rospy.Time( 0 )
        self.radar_data_msg.header.frame_id = frame_id
        
    def callback( self, Data ):
        self.radar_data_msg.targets = []

        i = 0
        for point in Data[MMWDEMO_OUTPUT_MSG_POINT_CLOUD]:
            print(point)
            target = RadarTarget()
            target.target_id = i
            target.range = point['range']
            target.azimuth = -1.0 * math.degrees( point['angle'] )
            target.elevation = math.degrees( point['elev'] )
            target.speed = point['doppler']
            target.snr = point['snr']
            self.radar_data_msg.targets.append( target )
            i = i + 1

        self.radar_data_msg.header.stamp = rospy.Time()
        self.pub.publish( self.radar_data_msg )

    
if __name__ == "__main__":
    try:
        rospy.init_node( 'vave_node')

        vave_intf = VaveROSInterface( 'map' )
        
        ppl_cnt = cli.PeopleCountingCLI( data_port, data_baud, vave_intf.callback )
    
        print("Waiting to start communication")
        time.sleep(1)
    
        ppl_cnt.read_data(stay_silent,TLVs_to_use)
        
    except rospy.ROSInterruptException:
        pass
